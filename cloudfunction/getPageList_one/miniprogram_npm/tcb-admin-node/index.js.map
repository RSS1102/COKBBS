{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["const Db = require('@cloudbase/database').Db\nconst storage = require('./src/storage')\nconst functions = require('./src/functions')\nconst auth = require('./src/auth')\nconst wx = require('./src/wx')\nconst Request = require('./src/utils/dbRequest')\nconst logger = require('./src/log')\nconst { SYMBOL_CURRENT_ENV } = require('./src/const/symbol')\nconst { getCurrentEnv } = require('./src/utils/utils')\n\nconst ExtRequest = require('./src/utils/extRequest')\n\nfunction Tcb(config) {\n  this.config = config ? config : this.config\n  this.requestClient = new ExtRequest()\n  this.SYMBOL_CURRENT_ENV = SYMBOL_CURRENT_ENV\n}\n\nTcb.prototype.init = function({\n  secretId,\n  secretKey,\n  sessionToken,\n  debug,\n  env,\n  proxy,\n  timeout,\n  serviceUrl,\n  version,\n  headers = {},\n  credentials,\n  timingsMeasurer,\n  isHttp,\n  signMethod = 'v2',\n  isUpdateSelfConfig = true,\n  forever = false\n} = {}) {\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\n    throw Error('secretId and secretKey must be a pair')\n  }\n\n  const config = {\n    get secretId() {\n      return this._secretId ? this._secretId : process.env.TENCENTCLOUD_SECRETID\n    },\n    set secretId(id) {\n      this._secretId = id\n    },\n    get secretKey() {\n      return this._secretKey\n        ? this._secretKey\n        : process.env.TENCENTCLOUD_SECRETKEY\n    },\n    set secretKey(key) {\n      this._secretKey = key\n    },\n    get sessionToken() {\n      if (this._sessionToken === undefined) {\n        //默认临时密钥\n        return process.env.TENCENTCLOUD_SESSIONTOKEN\n      } else if (this._sessionToken === false) {\n        //固定秘钥\n        return undefined\n      } else {\n        //传入的临时密钥\n        return this._sessionToken\n      }\n    },\n    set sessionToken(token) {\n      this._sessionToken = token\n    },\n    envName: env,\n    proxy: proxy,\n    isHttp: isHttp,\n    headers: Object.assign({}, headers)\n  }\n\n  config.debug = debug\n  config.forever = forever\n  config.signMethod = signMethod\n  config.timingsMeasurer = timingsMeasurer\n  config.secretId = secretId\n  config.secretKey = secretKey\n  config.timeout = timeout || 15000\n  config.serviceUrl = serviceUrl\n  config.credentials = credentials\n  config.sessionToken = sessionToken\n    ? sessionToken\n    : secretId && secretKey\n    ? false\n    : undefined\n\n  if (version) {\n    config.headers['x-sdk-version'] = version\n  }\n\n  // 这里的目的是创建新实例时可以避免更新当前实例\n  if (isUpdateSelfConfig) {\n    this.config = config\n  }\n\n  return new Tcb(config)\n}\n\nTcb.prototype.database = function(dbConfig = {}) {\n  Db.reqClass = Request\n  if (Object.prototype.toString.call(dbConfig).slice(8, -1) !== 'Object') {\n    throw Error('dbConfig must be an object')\n  }\n\n  if (dbConfig && dbConfig.env) {\n    // env变量名转换\n    dbConfig.envName = dbConfig.env\n    delete dbConfig.env\n  }\n  this.config = Object.assign(this.config, dbConfig)\n  return new Db({ ...this })\n}\n\n/**\n * @returns string\n */\nTcb.prototype.getCurrentEnv = function() {\n  return getCurrentEnv()\n}\n\nconst extensionMap = {}\n/**\n * 注册扩展\n */\nTcb.prototype.registerExtension = function(ext) {\n  extensionMap[ext.name] = ext\n}\n\nTcb.prototype.invokeExtension = async function(name, opts) {\n  const ext = extensionMap[name]\n  if (!ext) {\n    throw Error(`扩展${name} 必须先注册`)\n  }\n\n  return await ext.invoke(opts, this)\n}\n\nTcb.prototype.parseContext = function(context) {\n  if (typeof context !== 'object') {\n    throw Error('context 必须为对象类型')\n  }\n  let {\n    memory_limit_in_mb,\n    time_limit_in_ms,\n    request_id,\n    environ = '',\n    function_version,\n    namespace,\n    function_name,\n    environment\n  } = context\n  let parseResult = {}\n\n  try {\n    parseResult.memoryLimitInMb = memory_limit_in_mb\n    parseResult.timeLimitIns = time_limit_in_ms\n    parseResult.requestId = request_id\n    parseResult.functionVersion = function_version\n    parseResult.namespace = namespace\n    parseResult.functionName = function_name\n\n    // 存在environment 为新架构 上新字段 JSON序列化字符串\n    if (environment) {\n      parseResult.environment = JSON.parse(environment)\n      return parseResult\n    }\n\n    // 不存在environment 则为老字段，老架构上存在bug，无法识别value含特殊字符(若允许特殊字符，影响解析，这里特殊处理)\n\n    const parseEnviron = environ.split(';')\n    let parseEnvironObj = {}\n    for (let i in parseEnviron) {\n      const equalIndex = parseEnviron[i].indexOf('=')\n      if (equalIndex < 0) {\n        // value含分号影响切割，未找到= 均忽略\n        continue\n      }\n      const key = parseEnviron[i].slice(0, equalIndex)\n      let value = parseEnviron[i].slice(equalIndex + 1)\n\n      // value 含, 为数组\n      if (value.indexOf(',') >= 0) {\n        value = value.split(',')\n      }\n      parseEnvironObj[key] = value\n    }\n\n    parseResult.environ = parseEnvironObj\n  } catch (err) {\n    throw Error('无效的context对象')\n  }\n  return parseResult\n}\n\nfunction each(obj, fn) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      fn(obj[i], i)\n    }\n  }\n}\n\nfunction extend(target, source) {\n  each(source, function(val, key) {\n    target[key] = source[key]\n  })\n  return target\n}\n\nextend(Tcb.prototype, functions)\nextend(Tcb.prototype, storage)\nextend(Tcb.prototype, wx)\nextend(Tcb.prototype, auth)\nextend(Tcb.prototype, logger)\n\nmodule.exports = new Tcb()\n"]}